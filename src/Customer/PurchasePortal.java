/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author User
 */
public class PurchasePortal extends javax.swing.JFrame {
    
    private double totalAmountInSession = 0.0;
    private int totalQuantityInSession = 0;
   
    
    
    

    /**
     * Creates new form PurchasePortal
     */
    public PurchasePortal() {
        
        initComponents();
        
        
        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {

    },
    new String [] {
        "Product ID", "Product Name", "Category", "Quantity", "Price"
    }
) {
    boolean[] canEdit = new boolean [] {
        false, false, false, false, false
    };

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
    
    
});
        
        
        
        
        loadProductData("products.txt");
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;
        setLocation(x, y);
        setTitle("Clothing Shop Management System - Purchase Portal");
        setRandomID();
        PurchaseIDTextField.setEditable(false);
    }

    
    
    
    
    
private void loadProductData(String filename) {
    DefaultTableModel model = (DefaultTableModel) ProductTable.getModel();

    try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
        String line;
        String[] data = new String[5]; // Array to store data for each product

        while ((line = br.readLine()) != null) {
            // Split the line into attribute and value
            String[] parts = line.split(":");
            
            if (parts.length == 2) { // Check if the line has both attribute and value
                String attribute = parts[0].trim();
                String value = parts[1].trim();

                // Map the attribute to the corresponding index in the data array
                switch (attribute) {
                    case "Product ID":
                        data[0] = value;
                        break;
                    case "Product Name":
                        data[1] = value;
                        break;
                    case "Category":
                        data[2] = value;
                        break;
                    case "Quantity":
                        data[3] = value;
                        break;
                    case "Price":
                        data[4] = value;
                        // When all attributes are read, add the data to the table
                        model.addRow(data);
                        // Reset the data array for the next product
                        data = new String[5];
                        break;
                }
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    
    
    
    
    
    
    
    
    
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        PurchaseCartTable = new javax.swing.JTable();
        ProductNameTextField = new javax.swing.JTextField();
        QuantityTextField = new javax.swing.JTextField();
        SearchTextField = new javax.swing.JTextField();
        PurchaseIDTextField = new javax.swing.JTextField();
        BackButton = new javax.swing.JButton();
        PrintButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        PurchaseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Category", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ProductTable);

        PurchaseCartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Purchase ID", "Product ID", "Product Name", "Quantity", "Price", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(PurchaseCartTable);

        BackButton.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        PrintButton.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        PrintButton.setText("Print");
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });

        ClearButton.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        AddButton.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Purchase ID");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Product Name");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Quantity");

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Lucida Sans", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Search Product");

        Total.setBackground(new java.awt.Color(0, 0, 0));
        Total.setFont(new java.awt.Font("Lucida Sans", 1, 24)); // NOI18N
        Total.setForeground(new java.awt.Color(255, 255, 255));
        Total.setText("Total: 0.0");

        PurchaseButton.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        PurchaseButton.setText("Purchase");
        PurchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurchaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(QuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PurchaseIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ClearButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PurchaseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(47, 47, 47))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(81, 81, 81)
                        .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Total)
                        .addGap(330, 330, 330))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(32, 32, 32)
                        .addComponent(PurchaseIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(ProductNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(QuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PurchaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PrintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(Total)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        this.dispose();
        new CustomerDashboard().setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
       PurchaseIDTextField.setText("");
       ProductNameTextField.setText("");
       QuantityTextField.setText("");
       
       
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        
        
       DefaultTableModel productTableModel = (DefaultTableModel) ProductTable.getModel();
    DefaultTableModel cartTableModel = (DefaultTableModel) PurchaseCartTable.getModel();

    String productNameToSearch = ProductNameTextField.getText().trim();

    if (!productNameToSearch.isEmpty()) {
        // Search for the product in the ProductTable based on the entered product name
        int rowIndex = searchProductByName(productNameToSearch, productTableModel);

        if (rowIndex != -1) { // Check if the product is found
            // Get the data from the found row in the ProductTable
            String productID = ProductTable.getValueAt(rowIndex, 0).toString();
            String productName = ProductTable.getValueAt(rowIndex, 1).toString();
            String category = ProductTable.getValueAt(rowIndex, 2).toString();
            String quantityStr = QuantityTextField.getText().trim();
            String priceStr = ProductTable.getValueAt(rowIndex, 4).toString();

            if (!quantityStr.isEmpty()) {
                // Parse the quantity entered by the user
                int quantity = Integer.parseInt(quantityStr);

                // Check if the selected quantity is greater than 0 and less than or equal to the available quantity
                if (quantity > 0 && quantity <= Integer.parseInt(ProductTable.getValueAt(rowIndex, 3).toString())) {
                    // Calculate the total price for the item
                    double totalPrice = quantity * Double.parseDouble(priceStr);

                    // Add the item to the cart table
                    cartTableModel.addRow(new Object[]{PurchaseIDTextField.getText(), productID, productName, quantity, priceStr, totalPrice});

                    // Update the quantity in the product table
                    int updatedQuantity = Integer.parseInt(ProductTable.getValueAt(rowIndex, 3).toString()) - quantity;
                    ProductTable.setValueAt(updatedQuantity, rowIndex, 3);

                    // Save the updated product data to the file
                    saveProductData("products.txt", productTableModel);

                    // Calculate and update the total in the Total label
                    updateTotal(cartTableModel);
                    JOptionPane.showMessageDialog(this, "Product added to Cart", "Purchase Portal", JOptionPane.INFORMATION_MESSAGE);

                    // Clear the cart after purchase
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid quantity. Please enter a valid quantity.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please enter a quantity.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Product not found. Please enter a valid product name.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please enter a product name to search.");
    }

    setRandomID();
        
        
        
        
        
        
        
    }//GEN-LAST:event_AddButtonActionPerformed

    
    private int searchProductByName(String productName, DefaultTableModel model) {
    for (int row = 0; row < model.getRowCount(); row++) {
        if (productName.equalsIgnoreCase(model.getValueAt(row, 1).toString())) {
            return row; // Product found, return the row index
        }
    }
    return -1; // Product not found
}
    
    
    
    
    
    
    private boolean purchaseMade=false;
    
    
    private void PurchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseButtonActionPerformed
        DefaultTableModel cartTableModel = (DefaultTableModel) PurchaseCartTable.getModel();

        if (!purchaseMade && cartTableModel.getRowCount() > 0) {
            // Update totalAmountInSession and totalQuantityInSession
            updateSessionTotals(cartTableModel);

            // Show a dialog with the total amount and quantity in the session
            JOptionPane.showMessageDialog(this, "Purchase Successful\nTotal Quantity: " + totalQuantityInSession +
                    "\nTotal Amount: " + totalAmountInSession, "Purchase Portal", JOptionPane.INFORMATION_MESSAGE);

            
            
              
              savePurchaseInfoToFile("purchase_log.txt", totalAmountInSession, totalQuantityInSession);
            
            purchaseMade = false;
    }
    }//GEN-LAST:event_PurchaseButtonActionPerformed

    
    
    
    
    private void updateSessionTotals(DefaultTableModel cartTableModel) {
        for (int row = 0; row < cartTableModel.getRowCount(); row++) {
            totalAmountInSession += Double.parseDouble(cartTableModel.getValueAt(row, 5).toString());
            totalQuantityInSession += Integer.parseInt(cartTableModel.getValueAt(row, 3).toString());
        }
    }

    
    
    private void savePurchaseInfoToFile(String filename, double totalAmount, int totalQuantity) {
    try (PrintWriter writer = new PrintWriter(filename)) {
        writer.println("Total Purchase Count: " + totalQuantity);
        writer.println("Total Purchase Amount: " + totalAmount);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
}
    
    
    
    
    
    
    
    
    
    
    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed
       
       DefaultTableModel cartTableModel = (DefaultTableModel) PurchaseCartTable.getModel();

    if (cartTableModel.getRowCount() > 0) {
        try {
            // Create a unique file name using the purchase ID
            String fileName = "receipt_" + PurchaseIDTextField.getText() + ".txt";

            // Open a PrintWriter to write to the file
            try (PrintWriter writer = new PrintWriter(fileName)) {
                // Print header information
                writer.println("Purchase Receipt");
                writer.println("Purchase ID: " + PurchaseIDTextField.getText());
                writer.println("----------------------------------");

                // Print column headers
                writer.printf("%-20s%-20s%-10s%-10s%-10s%n", "Product Name", "Category", "Quantity", "Price", "Total");
                writer.println("----------------------------------");

                // Print details of each item in the cart
                for (int row = 0; row < cartTableModel.getRowCount(); row++) {
                    String productName = cartTableModel.getValueAt(row, 2).toString();
                    String category = getProductCategory(cartTableModel.getValueAt(row, 1).toString());
                    int quantity = Integer.parseInt(cartTableModel.getValueAt(row, 3).toString());
                    double price = Double.parseDouble(cartTableModel.getValueAt(row, 4).toString());
                    double total = Double.parseDouble(cartTableModel.getValueAt(row, 5).toString());
         
                    writer.printf("%-20s%-20s%-10s%-10s%-10s%n", productName, category, quantity, price, total);
                    
                    
                }

                writer.println("----------------------------------");

                // Print the total amount
                writer.println("Total: " + Total.getText().substring(7)); // Extract the total amount from the label text

                JOptionPane.showMessageDialog(this, "Receipt printed successfully.", "Purchase Portal", JOptionPane.INFORMATION_MESSAGE);
                
                
                
                
                
                clearCart(cartTableModel);
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error printing receipt.", "Purchase Portal", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No items in the cart to print.", "Purchase Portal", JOptionPane.WARNING_MESSAGE);
    }
     
    }//GEN-LAST:event_PrintButtonActionPerformed

    private String getProductCategory(String productID) {
    DefaultTableModel productTableModel = (DefaultTableModel) ProductTable.getModel();

    for (int row = 0; row < productTableModel.getRowCount(); row++) {
        if (productID.equals(productTableModel.getValueAt(row, 0).toString())) {
            return productTableModel.getValueAt(row, 2).toString();
        }
    }
    return "";
    }
  
private void clearCart(DefaultTableModel cartTableModel) {
    cartTableModel.setRowCount(0);
    Total.setText("Total: 0.0");
}
 
    
    
    
    
    private void saveProductData(String filename, DefaultTableModel model) {
    try (PrintWriter writer = new PrintWriter(filename)) {
        for (int row = 0; row < model.getRowCount(); row++) {
            writer.println("Product ID : " + model.getValueAt(row, 0));
            writer.println("Product Name : " + model.getValueAt(row, 1));
            writer.println("Category : " + model.getValueAt(row, 2));
            writer.println("Quantity : " + model.getValueAt(row, 3));
            writer.println("Price : " + model.getValueAt(row, 4));
            writer.println(); // Add an empty line between products
        }
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
}
    
    
    

private void updateTotal(DefaultTableModel cartTableModel) {
    double total = 0.0;
    for (int row = 0; row < cartTableModel.getRowCount(); row++) {
        total += Double.parseDouble(cartTableModel.getValueAt(row, 5).toString());
    }
    Total.setText("Total: " + total);
}
    
 
    
    
    private void setRandomID()
    {
        int generatedCode=generateRandomCode();
        
        String formattedCode=String.valueOf(generatedCode);
    
        PurchaseIDTextField.setText(formattedCode);
    
    
    }
    private int generateRandomCode()
    {
        Random rand=new Random();
        
        return rand.nextInt(9000)+1000;
    }
  
    
    
   
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchasePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchasePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchasePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchasePortal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchasePortal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton PrintButton;
    private javax.swing.JTextField ProductNameTextField;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton PurchaseButton;
    private javax.swing.JTable PurchaseCartTable;
    private javax.swing.JTextField PurchaseIDTextField;
    private javax.swing.JTextField QuantityTextField;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JLabel Total;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
